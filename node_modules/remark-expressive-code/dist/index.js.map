{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { Plugin, Transformer, VFileWithOutput } from 'unified'\nimport type { Root, Parent, Code, HTML } from 'mdast'\nimport {\n\tBundledShikiTheme,\n\tloadShikiTheme,\n\tExpressiveCode,\n\tExpressiveCodeConfig,\n\tExpressiveCodeTheme,\n\tExpressiveCodeBlockOptions,\n\tExpressiveCodeBlock,\n\tExpressiveCodeThemeInput,\n} from 'expressive-code'\nimport type { Element } from 'expressive-code/hast'\nimport { toHtml, visit } from 'expressive-code/hast'\n\nexport * from 'expressive-code'\n\nexport type RemarkExpressiveCodeOptions = Omit<ExpressiveCodeConfig, 'themes'> & {\n\t/**\n\t * The color themes that should be available for your code blocks.\n\t *\n\t * CSS variables will be generated for all themes, allowing to select the theme to display\n\t * using CSS. If you specify one dark and one light theme, a `prefers-color-scheme` media query\n\t * will also be generated by default. You can customize this to match your site's needs\n\t * through the `useDarkModeMediaQuery` and `themeCssSelector` options.\n\t *\n\t * The following item types are supported in this array:\n\t * - any theme name bundled with Shiki (e.g. `dracula`)\n\t * - any theme object compatible with VS Code or Shiki (e.g. imported from an NPM theme package)\n\t * - any ExpressiveCodeTheme instance (e.g. using `ExpressiveCodeTheme.fromJSONString(...)`\n\t *   to load a custom JSON/JSONC theme file yourself)\n\t *\n\t * Defaults to `['github-dark', 'github-light']`, two themes bundled with Shiki.\n\t */\n\tthemes?: ThemeObjectOrShikiThemeName[] | undefined\n\t/**\n\t * The number of spaces that should be used to render tabs. Defaults to 2.\n\t *\n\t * Any tabs found in code blocks in your markdown/MDX documents will be replaced\n\t * with the specified number of spaces. This ensures that the code blocks are\n\t * rendered consistently across browsers and platforms.\n\t *\n\t * If you want to preserve tabs in your code blocks, set this option to 0.\n\t */\n\ttabWidth?: number | undefined\n\t/**\n\t * This optional function provides support for multi-language sites by allowing you\n\t * to customize the locale used for a given code block.\n\t *\n\t * If the function returns `undefined`, the default locale provided in the\n\t * Expressive Code configuration is used.\n\t */\n\tgetBlockLocale?: (({ input, file }: { input: ExpressiveCodeBlockOptions; file: VFileWithOutput<null> }) => string | undefined | Promise<string | undefined>) | undefined\n\t/**\n\t * This optional function allows you to customize how `ExpressiveCodeBlock`\n\t * instances are created from code blocks found in the Markdown document.\n\t *\n\t * The function is called with an object containing the following properties:\n\t * - `input`: Block data for the `ExpressiveCodeBlock` constructor.\n\t * - `file`: A `VFile` instance representing the Markdown document.\n\t *\n\t * The function is expected to return an `ExpressiveCodeBlock` instance\n\t * or a promise resolving to one.\n\t */\n\tcustomCreateBlock?: (({ input, file }: { input: ExpressiveCodeBlockOptions; file: VFileWithOutput<null> }) => ExpressiveCodeBlock | Promise<ExpressiveCodeBlock>) | undefined\n\t/**\n\t * This advanced option allows you to influence the rendering process by creating\n\t * your own `ExpressiveCode` instance or processing the base styles and JS modules\n\t * added to every page.\n\t *\n\t * The return value will be cached and used for all code blocks on the site.\n\t */\n\tcustomCreateRenderer?: ((options: RemarkExpressiveCodeOptions) => Promise<RemarkExpressiveCodeRenderer> | RemarkExpressiveCodeRenderer) | undefined\n}\n\nexport type ThemeObjectOrShikiThemeName = BundledShikiTheme | ExpressiveCodeTheme | ExpressiveCodeThemeInput\n\nexport type RemarkExpressiveCodeDocument = {\n\t/**\n\t * The full path to the source file containing the code block.\n\t */\n\tsourceFilePath?: string | undefined\n}\n\nexport type RemarkExpressiveCodeRenderer = {\n\tec: ExpressiveCode\n\tbaseStyles: string\n\tthemeStyles: string\n\tjsModules: string[]\n}\n\n/**\n * Creates an `ExpressiveCode` instance using the given `options`,\n * including support to load themes bundled with Shiki by name.\n *\n * Returns the created `ExpressiveCode` instance together with the base styles and JS modules\n * that should be added to every page.\n */\nexport async function createRenderer(options: RemarkExpressiveCodeOptions = {}): Promise<RemarkExpressiveCodeRenderer> {\n\t// Transfer deprecated `theme` option to `themes` without triggering the deprecation warning\n\tconst deprecatedOptions: Omit<RemarkExpressiveCodeOptions, 'theme'> & { theme?: ThemeObjectOrShikiThemeName | ThemeObjectOrShikiThemeName[] | undefined } = options\n\tif (deprecatedOptions.theme && !options.themes) {\n\t\toptions.themes = Array.isArray(deprecatedOptions.theme) ? deprecatedOptions.theme : [deprecatedOptions.theme]\n\t\tdelete deprecatedOptions.theme\n\t}\n\tconst { themes, ...ecOptions } = options\n\n\tconst loadedThemes =\n\t\tthemes &&\n\t\t(await Promise.all(\n\t\t\t(Array.isArray(themes) ? themes : [themes]).map(async (theme) => {\n\t\t\t\tconst mustLoadTheme = theme !== undefined && !(theme instanceof ExpressiveCodeTheme)\n\t\t\t\tconst optLoadedTheme = mustLoadTheme ? new ExpressiveCodeTheme(typeof theme === 'string' ? await loadShikiTheme(theme) : theme) : theme\n\t\t\t\treturn optLoadedTheme\n\t\t\t})\n\t\t))\n\tconst ec = new ExpressiveCode({\n\t\tthemes: loadedThemes,\n\t\t...ecOptions,\n\t})\n\tconst baseStyles = await ec.getBaseStyles()\n\tconst themeStyles = await ec.getThemeStyles()\n\tconst jsModules = await ec.getJsModules()\n\n\treturn {\n\t\tec,\n\t\tbaseStyles,\n\t\tthemeStyles,\n\t\tjsModules,\n\t}\n}\n\nconst remarkExpressiveCode: Plugin<[RemarkExpressiveCodeOptions] | unknown[], Root> = (...settings) => {\n\tconst options: RemarkExpressiveCodeOptions = settings[0] ?? {}\n\tconst { tabWidth = 2, getBlockLocale, customCreateRenderer, customCreateBlock } = options\n\n\tlet asyncRenderer: Promise<RemarkExpressiveCodeRenderer> | RemarkExpressiveCodeRenderer | undefined\n\n\tconst renderBlockToHtml = async ({\n\t\tcodeBlock,\n\t\trenderer,\n\t\taddedStyles,\n\t\taddedJsModules,\n\t}: {\n\t\tcodeBlock: ExpressiveCodeBlock\n\t\trenderer: RemarkExpressiveCodeRenderer\n\t\taddedStyles: Set<string>\n\t\taddedJsModules: Set<string>\n\t}): Promise<string> => {\n\t\tconst { ec, baseStyles, themeStyles, jsModules } = renderer\n\n\t\t// Try to render the current code block\n\t\tconst { renderedGroupAst, styles } = await ec.render(codeBlock)\n\n\t\t// Collect any style and script elements that we need to add to the output\n\t\tconst extraElements: Element[] = []\n\t\tconst stylesToPrepend: string[] = []\n\n\t\t// Add any styles that we haven't added yet\n\t\t// - Base styles\n\t\tif (baseStyles && !addedStyles.has(baseStyles)) {\n\t\t\taddedStyles.add(baseStyles)\n\t\t\tstylesToPrepend.push(baseStyles)\n\t\t}\n\t\t// - Theme styles\n\t\tif (themeStyles && !addedStyles.has(themeStyles)) {\n\t\t\taddedStyles.add(themeStyles)\n\t\t\tstylesToPrepend.push(themeStyles)\n\t\t}\n\t\t// - Group-level styles\n\t\tfor (const style of styles) {\n\t\t\tif (addedStyles.has(style)) continue\n\t\t\taddedStyles.add(style)\n\t\t\tstylesToPrepend.push(style)\n\t\t}\n\t\t// Combine all styles we collected (if any) into a single style element\n\t\tif (stylesToPrepend.length) {\n\t\t\textraElements.push({\n\t\t\t\ttype: 'element',\n\t\t\t\ttagName: 'style',\n\t\t\t\tproperties: {},\n\t\t\t\tchildren: [{ type: 'text', value: [...stylesToPrepend].join('') }],\n\t\t\t})\n\t\t}\n\n\t\t// Create script elements for all JS modules we haven't added yet\n\t\tjsModules.forEach((moduleCode) => {\n\t\t\tif (addedJsModules.has(moduleCode)) return\n\t\t\taddedJsModules.add(moduleCode)\n\t\t\textraElements.push({\n\t\t\t\ttype: 'element',\n\t\t\t\ttagName: 'script',\n\t\t\t\tproperties: { type: 'module' },\n\t\t\t\tchildren: [{ type: 'text', value: moduleCode }],\n\t\t\t})\n\t\t})\n\n\t\t// Prepend any extra elements to the children of the renderedGroupAst wrapper,\n\t\t// which keeps them inside the wrapper and reduces the chance of CSS issues\n\t\t// caused by selectors like `* + *` on the parent level\n\t\trenderedGroupAst.children.unshift(...extraElements)\n\n\t\t// Render the group AST to HTML\n\t\tconst htmlContent = toHtml(renderedGroupAst)\n\n\t\treturn htmlContent\n\t}\n\n\tconst transformer: Transformer<Root, Root> = async (tree, file) => {\n\t\tconst nodesToProcess: [Parent, Code][] = []\n\n\t\tvisit(tree, 'code', (code, index, parent) => {\n\t\t\tif (index === null || !parent) return\n\t\t\tnodesToProcess.push([parent, code])\n\t\t})\n\n\t\tif (nodesToProcess.length === 0) return\n\n\t\t// We found at least one code node, so we need to ensure our renderer is available\n\t\t// and wait for its initialization if necessary\n\t\tif (asyncRenderer === undefined) {\n\t\t\tasyncRenderer = (customCreateRenderer ?? createRenderer)(options)\n\t\t}\n\t\tconst renderer = await asyncRenderer\n\n\t\tconst addedStyles = new Set<string>()\n\t\tconst addedJsModules = new Set<string>()\n\n\t\tfor (let groupIndex = 0; groupIndex < nodesToProcess.length; groupIndex++) {\n\t\t\tconst [parent, code] = nodesToProcess[groupIndex]\n\n\t\t\t// Normalize the code coming from the Markdown/MDX document\n\t\t\tlet normalizedCode = code.value\n\t\t\tif (tabWidth > 0) normalizedCode = normalizedCode.replace(/\\t/g, ' '.repeat(tabWidth))\n\n\t\t\t// Build the ExpressiveCodeBlockOptions object that we will pass either\n\t\t\t// to the ExpressiveCodeBlock constructor or the customCreateBlock function\n\t\t\tconst input: ExpressiveCodeBlockOptions = {\n\t\t\t\tcode: normalizedCode,\n\t\t\t\tlanguage: code.lang || '',\n\t\t\t\tmeta: code.meta || '',\n\t\t\t\tparentDocument: {\n\t\t\t\t\tsourceFilePath: file.path,\n\t\t\t\t\tdocumentRoot: tree,\n\t\t\t\t\tpositionInDocument: {\n\t\t\t\t\t\tgroupIndex,\n\t\t\t\t\t\ttotalGroups: nodesToProcess.length,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\n\t\t\t// Allow the user to customize the locale for this code block\n\t\t\tif (getBlockLocale) {\n\t\t\t\tinput.locale = await getBlockLocale({ input: input, file })\n\t\t\t}\n\n\t\t\t// Allow the user to customize the ExpressiveCodeBlock instance\n\t\t\tconst codeBlock = customCreateBlock ? await customCreateBlock({ input, file }) : new ExpressiveCodeBlock(input)\n\n\t\t\t// Render the code block to HTML\n\t\t\tconst blockHtml = await renderBlockToHtml({ codeBlock, renderer, addedStyles, addedJsModules })\n\n\t\t\t// Replace current node with a new HTML node that contains the rendered block\n\t\t\tconst html: HTML = {\n\t\t\t\ttype: 'html',\n\t\t\t\tvalue: blockHtml,\n\t\t\t}\n\t\t\tparent.children.splice(parent.children.indexOf(code), 1, html)\n\t\t}\n\t}\n\n\treturn transformer\n}\n\nexport default remarkExpressiveCode\n"],"mappings":"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","names":[]}