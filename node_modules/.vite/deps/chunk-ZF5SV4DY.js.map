{
  "version": 3,
  "sources": ["../../@astrojs/preact/dist/static-html.js", "../../@astrojs/preact/dist/client.js"],
  "sourcesContent": ["import { h } from \"preact\";\nconst StaticHtml = ({ value, name, hydrate = true }) => {\n  if (!value) return null;\n  const tagName = hydrate ? \"astro-slot\" : \"astro-static-slot\";\n  return h(tagName, { name, dangerouslySetInnerHTML: { __html: value } });\n};\nStaticHtml.shouldComponentUpdate = () => false;\nvar static_html_default = StaticHtml;\nexport {\n  static_html_default as default\n};\n", "import { h, hydrate, render } from \"preact\";\nimport StaticHtml from \"./static-html.js\";\nconst sharedSignalMap = /* @__PURE__ */ new Map();\nvar client_default = (element) => async (Component, props, { default: children, ...slotted }, { client }) => {\n  if (!element.hasAttribute(\"ssr\")) return;\n  for (const [key, value] of Object.entries(slotted)) {\n    props[key] = h(StaticHtml, { value, name: key });\n  }\n  let signalsRaw = element.dataset.preactSignals;\n  if (signalsRaw) {\n    const { signal } = await import(\"@preact/signals\");\n    let signals = JSON.parse(\n      element.dataset.preactSignals\n    );\n    for (const [propName, signalId] of Object.entries(signals)) {\n      if (Array.isArray(signalId)) {\n        signalId.forEach(([id, indexOrKeyInProps]) => {\n          const mapValue = props[propName][indexOrKeyInProps];\n          let valueOfSignal = mapValue;\n          if (typeof indexOrKeyInProps !== \"string\") {\n            valueOfSignal = mapValue[0];\n            indexOrKeyInProps = mapValue[1];\n          }\n          if (!sharedSignalMap.has(id)) {\n            const signalValue = signal(valueOfSignal);\n            sharedSignalMap.set(id, signalValue);\n          }\n          props[propName][indexOrKeyInProps] = sharedSignalMap.get(id);\n        });\n      } else {\n        if (!sharedSignalMap.has(signalId)) {\n          const signalValue = signal(props[propName]);\n          sharedSignalMap.set(signalId, signalValue);\n        }\n        props[propName] = sharedSignalMap.get(signalId);\n      }\n    }\n  }\n  const bootstrap = client !== \"only\" ? hydrate : render;\n  bootstrap(\n    h(Component, props, children != null ? h(StaticHtml, { value: children }) : children),\n    element\n  );\n  element.addEventListener(\"astro:unmount\", () => render(null, element), { once: true });\n};\nexport {\n  client_default as default\n};\n"],
  "mappings": ";;;;;;;AACA,IAAM,aAAa,CAAC,EAAE,OAAO,MAAM,UAAU,KAAK,MAAM;AACtD,MAAI,CAAC;AAAO,WAAO;AACnB,QAAM,UAAU,UAAU,eAAe;AACzC,SAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,EAAE,QAAQ,MAAM,EAAE,CAAC;AACxE;AACA,WAAW,wBAAwB,MAAM;AACzC,IAAI,sBAAsB;;;ACL1B,IAAM,kBAAkC,oBAAI,IAAI;AAChD,IAAI,iBAAiB,CAAC,YAAY,OAAO,WAAW,OAAO,EAAE,SAAS,UAAU,GAAG,QAAQ,GAAG,EAAE,OAAO,MAAM;AAC3G,MAAI,CAAC,QAAQ,aAAa,KAAK;AAAG;AAClC,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,OAAO,GAAG;AAClD,UAAM,GAAG,IAAI,EAAE,qBAAY,EAAE,OAAO,MAAM,IAAI,CAAC;AAAA,EACjD;AACA,MAAI,aAAa,QAAQ,QAAQ;AACjC,MAAI,YAAY;AACd,UAAM,EAAE,OAAO,IAAI,MAAM,OAAO,8BAAiB;AACjD,QAAI,UAAU,KAAK;AAAA,MACjB,QAAQ,QAAQ;AAAA,IAClB;AACA,eAAW,CAAC,UAAU,QAAQ,KAAK,OAAO,QAAQ,OAAO,GAAG;AAC1D,UAAI,MAAM,QAAQ,QAAQ,GAAG;AAC3B,iBAAS,QAAQ,CAAC,CAAC,IAAI,iBAAiB,MAAM;AAC5C,gBAAM,WAAW,MAAM,QAAQ,EAAE,iBAAiB;AAClD,cAAI,gBAAgB;AACpB,cAAI,OAAO,sBAAsB,UAAU;AACzC,4BAAgB,SAAS,CAAC;AAC1B,gCAAoB,SAAS,CAAC;AAAA,UAChC;AACA,cAAI,CAAC,gBAAgB,IAAI,EAAE,GAAG;AAC5B,kBAAM,cAAc,OAAO,aAAa;AACxC,4BAAgB,IAAI,IAAI,WAAW;AAAA,UACrC;AACA,gBAAM,QAAQ,EAAE,iBAAiB,IAAI,gBAAgB,IAAI,EAAE;AAAA,QAC7D,CAAC;AAAA,MACH,OAAO;AACL,YAAI,CAAC,gBAAgB,IAAI,QAAQ,GAAG;AAClC,gBAAM,cAAc,OAAO,MAAM,QAAQ,CAAC;AAC1C,0BAAgB,IAAI,UAAU,WAAW;AAAA,QAC3C;AACA,cAAM,QAAQ,IAAI,gBAAgB,IAAI,QAAQ;AAAA,MAChD;AAAA,IACF;AAAA,EACF;AACA,QAAM,YAAY,WAAW,SAAS,IAAU;AAChD;AAAA,IACE,EAAE,WAAW,OAAO,YAAY,OAAO,EAAE,qBAAY,EAAE,OAAO,SAAS,CAAC,IAAI,QAAQ;AAAA,IACpF;AAAA,EACF;AACA,UAAQ,iBAAiB,iBAAiB,MAAM,EAAO,MAAM,OAAO,GAAG,EAAE,MAAM,KAAK,CAAC;AACvF;",
  "names": []
}
